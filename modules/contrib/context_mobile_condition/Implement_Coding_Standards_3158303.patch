diff --git a/modules/contrib/context_mobile_condition/src/Plugin/Condition/MobileDetectCondition.php b/modules/contrib/context_mobile_condition/src/Plugin/Condition/MobileDetectCondition.php
index 8d26aea..14a0bad 100644
--- a/modules/contrib/context_mobile_condition/src/Plugin/Condition/MobileDetectCondition.php
+++ b/modules/contrib/context_mobile_condition/src/Plugin/Condition/MobileDetectCondition.php
@@ -1,4 +1,21 @@
 <?php
+
+/**
+ * Provides context_mobile_condition Implementation.
+ *
+ * @category Module
+ *
+ * @package Contrib
+ *
+ * @author Display Name <username@example.com>
+ *
+ * @license https://www.drupal.org ABC
+ *
+ * @version "GIT: <1001>"
+ *
+ * @link www.google.com
+ */
+
 namespace Drupal\context_mobile_condition\Plugin\Condition;
 
 use Drupal\Core\Condition\ConditionPluginBase;
@@ -6,8 +23,24 @@
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Mobile_Detect;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Core\StringTranslation\TranslationInterface;
 
 /**
+ * Returns responses for context_mobile_condition module routes.
+ *
+ * @category Module
+ *
+ * @package Contrib
+ *
+ * @author Display Name <username@example.com>
+ *
+ * @license https://www.drupal.org ABC
+ *
+ * @version "Release: 8"
+ *
+ * @link https://www.drupal.org
+ *
  * Provides a 'Mobile Detect' condition.
  *
  * @Condition(
@@ -15,87 +48,129 @@
  *    label = @Translation("Mobile detect condition"),
  * )
  */
-class MobileDetectCondition extends ConditionPluginBase implements ContainerFactoryPluginInterface {
+class MobileDetectCondition extends ConditionPluginBase implements 
+ContainerFactoryPluginInterface
+{
+    use StringTranslationTrait;
+
+    /**
+     * The string translation information.
+     *
+     * @var Drupal\Core\StringTranslation\TranslationInterface
+     */
+    protected $stringTranslation;
 
-  /**
-   * Constructs a HttpStatusCode condition plugin.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param array $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   *   The request stack.
-   */
-  public function __construct(array $configuration, $plugin_id, array $plugin_definition)
-  {
-    parent::__construct($configuration, $plugin_id, $plugin_definition);
-  }
+    /**
+     * Constructs a HttpStatusCode condition plugin.
+     *
+     * @param array  $configuration      A configuration array containing
+     *                                   information about the plugin
+     *                                   instance about the plugin
+     *                                   instance.
+     * @param string $plugin_id          The plugin_id for the plugin instance. 
+     * @param array  $plugin_definition  The plugin implementation definition.
+     * @param $string_translation The string translation information.   
+     */
+    public function __construct(array $configuration, $plugin_id, 
+        array $plugin_definition, TranslationInterface $string_translation
+    ) {
+        parent::__construct($configuration, $plugin_id, $plugin_definition);
+        $this->stringTranslation = $string_translation;
+    }
 
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition)
-  {
-    return new static(
-      $configuration,
-      $plugin_id,
-      $plugin_definition
-    );
-  }
+    /**
+     * Create Method.
+     *
+     * @param $container         The container variable.
+     * @param $configuration     The configuration variable.
+     * @param $plugin_id         The plugin id variable.
+     * @param $plugin_definition The plugin definition variable.
+     *
+     * @return object
+     */
+    public static function create(ContainerInterface $container, 
+        array $configuration, $plugin_id, $plugin_definition
+    ) {
+        return new static(
+            $configuration,
+            $plugin_id,
+            $plugin_definition,
+            $container->get('string_translation')
+        );
+    }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function buildConfigurationForm(array $form, FormStateInterface $form_state)
-  {
-    $configuration = $this->getConfiguration();
-    $form['mobile_detect_condition'] = [
-      '#title' => $this->t('Mobile detect'),
-      '#type' => 'radios',
-      '#options' => array(
+    /**
+     * Defines form and form state interface and build configuration form.
+     *
+     * Build the form using $form and $form_state variable using.
+     *
+     * @param $form       Build the form using $form varibale using.
+     * @param $form_state Build the form using $form_state interface.
+     *
+     * @return string
+     */
+    public function buildConfigurationForm(array $form, 
+        FormStateInterface $form_state
+    ) {
+        $configuration = $this->getConfiguration();
+        $form['mobile_detect_condition'] = [
+        '#title' => $this->t('Mobile detect'),
+        '#type' => 'radios',
+        '#options' => array(
         '0' => $this->t('Mobile Device'),
         '1' => $this->t('Tablet Device'),
         '2' => $this->t('Computer device'),
-      ),
-      '#default_value' => isset($configuration['mobile_detect_condition']) && !empty($configuration['mobile_detect_condition']) ? $configuration['mobile_detect_condition'] : 0,
-    ];
+        ),
+        '#default_value' => isset($configuration['mobile_detect_condition']) 
+        && !empty($configuration['mobile_detect_condition']) ? 
+        $configuration['mobile_detect_condition'] : 0,
+        ];
 
-    return $form;
-  }
+        return $form;
+    }
 
-  /**
-   * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   */
-  public function submitConfigurationForm(array &$form, FormStateInterface $form_state)
-  {
-    $this->configuration['mobile_detect_condition'] = $form_state->getValue('mobile_detect_condition');
-    parent::submitConfigurationForm($form, $form_state);
-  }
+    /**
+     * Defines form and form state interface and submit configuration form.
+     *
+     * Submit the form using $form and $form_state variable using.
+     *
+     * @param $form       Submit the form using $form varibale using.
+     * @param $form_state Submit the form using $form_state interface.
+     *
+     * @return string
+     */
+    public function submitConfigurationForm(array &$form, 
+        FormStateInterface $form_state
+    ) {
+        $this->configuration['mobile_detect_condition']
+            = $form_state->getValue('mobile_detect_condition');
+            parent::submitConfigurationForm($form, $form_state);
+    }
 
-  /**
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
-   */
-  public function summary()
-  {
-    return t('Select type');
-  }
+    /**
+     * Define summary.
+     *
+     * @return string
+     */
+    public function summary()
+    {
+        return $this->t('Select type');
+    }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function evaluate()
-  {
-    $detect = new Mobile_Detect;
-    $a = $detect->isMobile();
-    $b = $detect->isTablet();
-    $deviceType = $detect->isMobile() ? 'tablet' : 'computer';
-    $scriptVersion = $detect->getScriptVersion();
+    /**
+     * Define evaluate.
+     *
+     * @return bool
+     */
+    public function evaluate()
+    {
+        $detect = new Mobile_Detect;
+        $a = $detect->isMobile();
+        $b = $detect->isTablet();
+        $deviceType = $detect->isMobile() ? 'tablet' : 'computer';
+        $scriptVersion = $detect->getScriptVersion();
 
-    return true;
-  }
+        return TRUE;
+    }
 
 }
