diff --git a/modules/contrib/pathauto/tests/src/Functional/PathautoBulkUpdateTest.php b/modules/contrib/pathauto/tests/src/Functional/PathautoBulkUpdateTest.php
index 1cad4f4..908c75c 100644
--- a/modules/contrib/pathauto/tests/src/Functional/PathautoBulkUpdateTest.php
+++ b/modules/contrib/pathauto/tests/src/Functional/PathautoBulkUpdateTest.php
@@ -90,7 +90,8 @@ public function testBulkUpdate() {
     $this->drupalPostForm('admin/config/search/path/update_bulk', $edit, t('Update'));
 
     // This has generated 8 aliases: 5 nodes, 2 users and 1 forum.
-    $this->assertText('Generated 8 URL aliases.');
+    // $this->assertText('Generated 8 URL aliases.');
+    $this->assertSession()->PageTextContains('Generated 8 URL aliases.');
 
     // Check that aliases have actually been created.
     foreach ($this->nodes as $node) {
@@ -105,7 +106,8 @@ public function testBulkUpdate() {
 
     // Run the update again which should not run against any nodes.
     $this->drupalPostForm('admin/config/search/path/update_bulk', $edit, t('Update'));
-    $this->assertText('No new URL aliases to generate.');
+    // $this->assertText('No new URL aliases to generate.');
+    $this->assertSession()->PageTextContains('No new URL aliases to generate.');
     $this->assertNoEntityAliasExists($new_node);
 
     // Make sure existing aliases can be overridden.
@@ -114,7 +116,8 @@ public function testBulkUpdate() {
     // Patterns did not change, so no aliases should be regenerated.
     $edit['action'] = 'all';
     $this->drupalPostForm('admin/config/search/path/update_bulk', $edit, t('Update'));
-    $this->assertText('No new URL aliases to generate.');
+    // $this->assertText('No new URL aliases to generate.');
+    $this->assertSession()->PageTextContains('No new URL aliases to generate.');
 
     // Update the node pattern, and leave other patterns alone. Existing nodes
     // should get a new alias, except the node above whose alias is manually
@@ -123,7 +126,8 @@ public function testBulkUpdate() {
     $this->patterns['node'] = $this->createPattern('node', '/archive/node-[node:nid]');
 
     $this->drupalPostForm('admin/config/search/path/update_bulk', $edit, t('Update'));
-    $this->assertText('Generated 5 URL aliases.');
+    // $this->assertText('Generated 5 URL aliases.');
+    $this->assertSession()->PageTextContains('Generated 5 URL aliases.');
 
     // Prevent existing aliases to be overridden. The bulk generate page should
     // only offer to create an alias for paths which have none.
@@ -131,7 +135,8 @@ public function testBulkUpdate() {
 
     $this->drupalGet('admin/config/search/path/update_bulk');
     $this->assertFieldByName('action', 'create');
-    $this->assertText('Pathauto settings are set to ignore paths which already have a URL alias.');
+    // $this->assertText('Pathauto settings are set to ignore paths which already have a URL alias.');
+    $this->assertSession()->PageTextContains('Pathauto settings are set to ignore paths which already have a URL alias.');
     $this->assertNoFieldByName('action', 'update');
     $this->assertNoFieldByName('action', 'all');
   }
@@ -156,7 +161,8 @@ public function testBulkUpdateExistingContent() {
     $this->drupalPostForm('admin/config/search/path/update_bulk', $edit, t('Update'));
 
     // Verify that the alias was created for the node.
-    $this->assertText('Generated 1 URL alias.');
+    // $this->assertText('Generated 1 URL alias.');
+    $this->assertSession()->PageTextContains('Generated 1 URL alias.');
   }
 
 }
diff --git a/modules/contrib/pathauto/tests/src/Functional/PathautoMassDeleteTest.php b/modules/contrib/pathauto/tests/src/Functional/PathautoMassDeleteTest.php
index 740df92..fcba613 100644
--- a/modules/contrib/pathauto/tests/src/Functional/PathautoMassDeleteTest.php
+++ b/modules/contrib/pathauto/tests/src/Functional/PathautoMassDeleteTest.php
@@ -117,7 +117,8 @@ public function testDeleteAll() {
       'options[keep_custom_aliases]' => FALSE,
     ];
     $this->drupalPostForm('admin/config/search/path/delete_bulk', $edit, $this->t('Delete aliases now!'));
-    $this->assertText($this->t('All of your path aliases have been deleted.'));
+    // $this->assertText($this->t('All of your path aliases have been deleted.'));
+    $this->assertSession()->PageTextContains($this->t('All of your path aliases have been deleted.'));
     $this->assertUrl('admin/config/search/path/delete_bulk');
 
     // Make sure that all of them are actually deleted.
@@ -163,7 +164,8 @@ public function testDeleteAll() {
       'options[keep_custom_aliases]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/search/path/delete_bulk', $edit, $this->t('Delete aliases now!'));
-    $this->assertText($this->t('All of your automatically generated path aliases have been deleted.'));
+    // $this->assertText($this->t('All of your automatically generated path aliases have been deleted.'));
+    $this->assertSession()->PageTextContains($this->t('All of your automatically generated path aliases have been deleted.'));
     $this->assertUrl('admin/config/search/path/delete_bulk');
 
     // Make sure that only custom aliases and aliases with no information about
diff --git a/modules/contrib/pathauto/tests/src/Functional/PathautoNodeWebTest.php b/modules/contrib/pathauto/tests/src/Functional/PathautoNodeWebTest.php
index f9a5bca..ff9bcc7 100644
--- a/modules/contrib/pathauto/tests/src/Functional/PathautoNodeWebTest.php
+++ b/modules/contrib/pathauto/tests/src/Functional/PathautoNodeWebTest.php
@@ -80,7 +80,8 @@ public function testNodeEditing() {
 
     // Check whether the alias actually works.
     $this->drupalGet($automatic_alias);
-    $this->assertText($title, 'Node accessible through automatic alias.');
+    // $this->assertText($title, 'Node accessible through automatic alias.');
+    $this->assertSession()->PageTextContains($title, 'Node accessible through automatic alias.');
 
     // Manually set the node's alias.
     $manual_alias = '/content/' . $node->id();
@@ -89,7 +90,8 @@ public function testNodeEditing() {
       'path[0][alias]' => $manual_alias,
     ];
     $this->drupalPostForm($node->toUrl('edit-form'), $edit, t('Save'));
-    $this->assertText(t('@type @title has been updated.', ['@type' => 'page', '@title' => $title]));
+    // $this->assertText(t('@type @title has been updated.', ['@type' => 'page', '@title' => $title]));
+    $this->assertSession()->PageTextContains(t('@type @title has been updated.', ['@type' => 'page', '@title' => $title]));
 
     // Check that the automatic alias checkbox is now unchecked by default.
     $this->drupalGet("node/{$node->id()}/edit");
@@ -98,14 +100,15 @@ public function testNodeEditing() {
 
     // Submit the node form with the default values.
     $this->drupalPostForm(NULL, ['path[0][pathauto]' => FALSE], t('Save'));
-    $this->assertText(t('@type @title has been updated.', ['@type' => 'page', '@title' => $title]));
-
+    // $this->assertText(t('@type @title has been updated.', ['@type' => 'page', '@title' => $title]));
+    $this->assertSession()->PageTextContains(t('@type @title has been updated.', ['@type' => 'page', '@title' => $title]));
     // Test that the old (automatic) alias has been deleted and only accessible
     // through the new (manual) alias.
     $this->drupalGet($automatic_alias);
     $this->assertResponse(404, 'Node not accessible through automatic alias.');
     $this->drupalGet($manual_alias);
-    $this->assertText($title, 'Node accessible through manual alias.');
+    // $this->assertText($title, 'Node accessible through manual alias.');
+    $this->assertSession()->PageTextContains($title, 'Node accessible through manual alias.');
 
     // Test that the manual alias is not kept for new nodes when the pathauto
     // checkbox is ticked.
@@ -130,7 +133,8 @@ public function testNodeEditing() {
     }
 
     $this->drupalGet('node/add/article');
-    $this->assertNoFieldById('edit-path-0-pathauto');
+    // $this->assertNoFieldById('edit-path-0-pathauto');
+    $this->assertSession()->fieldNotExists('edit-path-0-pathauto')
     $this->assertFieldByName('path[0][alias]', '');
 
     $edit = [];
@@ -141,7 +145,8 @@ public function testNodeEditing() {
 
     // Pathauto checkbox should still not exist.
     $this->drupalGet($node->toUrl('edit-form'));
-    $this->assertNoFieldById('edit-path-0-pathauto');
+    // $this->assertNoFieldById('edit-path-0-pathauto');
+    $this->assertSession()->fieldNotExists('edit-path-0-pathauto')
     $this->assertFieldByName('path[0][alias]', '');
     $this->assertNoEntityAlias($node);
   }
@@ -171,7 +176,8 @@ public function testNodeOperations() {
       'node_bulk_form[' . $index . ']' => TRUE,
     ];
     $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
-    $this->assertText('Update URL alias was applied to 1 item.');
+    // $this->assertText('Update URL alias was applied to 1 item.');
+    $this->assertSession()->PageTextContains('Update URL alias was applied to 1 item.');
 
     $this->assertEntityAlias($node1, '/content/' . $node1->getTitle());
     $this->assertEntityAlias($node2, '/node/' . $node2->id());
@@ -214,7 +220,8 @@ public function testNodeState() {
 
     $edit = ['title[0][value]' => 'Node version two'];
     $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Basic page Node version two has been updated.');
+    // $this->assertText('Basic page Node version two has been updated.');
+    $this->assertSession()->pageTextContains('Basic page Node version two has been updated.');
 
     $this->assertEntityAlias($node, '/test-alias');
     $this->assertNoEntityAliasExists($node, '/content/node-version-one');
@@ -231,7 +238,8 @@ public function testNodeState() {
       'path[0][alias]' => '/manually-edited-alias',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Basic page Node version three has been updated.');
+    // $this->assertText('Basic page Node version three has been updated.');
+    $this->assertSession()->pageTextContains('Basic page Node version three has been updated.');
 
     $this->assertEntityAlias($node, '/manually-edited-alias');
     $this->assertNoEntityAliasExists($node, '/test-alias');
@@ -278,7 +286,8 @@ public function testCustomAliasWithoutPattern() {
       'path[0][alias]' => '/sample-article',
     ];
     $this->drupalPostForm('node/add/article', $edit, t('Save'));
-    $this->assertText(t('article Sample article has been created.'));
+    // $this->assertText(t('article Sample article has been created.'));
+    $this->assertSession()->pageTextContains(t('article Sample article has been created.'));
 
     // Test the alias.
     $this->assertAliasExists(['alias' => '/sample-article']);
diff --git a/modules/contrib/pathauto/tests/src/Functional/PathautoSettingsFormWebTest.php b/modules/contrib/pathauto/tests/src/Functional/PathautoSettingsFormWebTest.php
index bbbb3c0..d4924b9 100644
--- a/modules/contrib/pathauto/tests/src/Functional/PathautoSettingsFormWebTest.php
+++ b/modules/contrib/pathauto/tests/src/Functional/PathautoSettingsFormWebTest.php
@@ -131,19 +131,23 @@ public function testDefaultFormValues() {
   public function testVerboseOption() {
     $edit = ['verbose' => '1'];
     $this->drupalPostForm('/admin/config/search/path/settings', $edit, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    // $this->assertText(t('The configuration options have been saved.'));
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
     $this->assertFieldChecked('edit-verbose');
 
     $title = 'Verbose settings test';
     $this->drupalGet('/node/add/article');
     $this->assertFieldChecked('edit-path-0-pathauto');
     $this->drupalPostForm(NULL, ['title[0][value]' => $title], t('Save'));
-    $this->assertText('Created new alias /content/verbose-settings-test for');
+    // $this->assertText('Created new alias /content/verbose-settings-test for');
+    $this->assertSession()->pageTextContains('Created new alias /content/verbose-settings-test for');
 
     $node = $this->drupalGetNodeByTitle($title);
     $this->drupalPostForm('/node/' . $node->id() . '/edit', ['title[0][value]' => 'Updated title'], t('Save'));
-    $this->assertText('Created new alias /content/updated-title for');
-    $this->assertText('replacing /content/verbose-settings-test.');
+    // $this->assertText('Created new alias /content/updated-title for');
+    $this->assertSession()->pageTextContains('Created new alias /content/updated-title for');
+    // $this->assertText('replacing /content/verbose-settings-test.');
+    $this->assertSession()->pageTextContains('replacing /content/verbose-settings-test.');
   }
 
   /**
@@ -221,7 +225,8 @@ protected function checkAlias($title, $alias, $settings = []) {
     // Submit the settings form.
     $edit = array_merge($this->defaultFormValues + $this->defaultPunctuations, $settings);
     $this->drupalPostForm('/admin/config/search/path/settings', $edit, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    // $this->assertText(t('The configuration options have been saved.'));
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
     // If we do not clear the caches here, AliasCleaner will use its
     // cleanStringCache instance variable. Due to that the creation of aliases
diff --git a/modules/contrib/pathauto/tests/src/Functional/PathautoTaxonomyWebTest.php b/modules/contrib/pathauto/tests/src/Functional/PathautoTaxonomyWebTest.php
index 9b643a1..384c2ed 100644
--- a/modules/contrib/pathauto/tests/src/Functional/PathautoTaxonomyWebTest.php
+++ b/modules/contrib/pathauto/tests/src/Functional/PathautoTaxonomyWebTest.php
@@ -76,7 +76,8 @@ public function testTermEditing() {
 
     // Check whether the alias actually works.
     $this->drupalGet($automatic_alias);
-    $this->assertText($name, 'Term accessible through automatic alias.');
+    // $this->assertText($name, 'Term accessible through automatic alias.');
+    $this->assertSession()->pageTextContains($name, 'Term accessible through automatic alias.');
 
     // Manually set the term's alias.
     $manual_alias = '/tags/' . $term->id();
@@ -85,7 +86,8 @@ public function testTermEditing() {
       'path[0][alias]' => $manual_alias,
     ];
     $this->drupalPostForm("taxonomy/term/{$term->id()}/edit", $edit, t('Save'));
-    $this->assertText("Updated term $name.");
+    // $this->assertText("Updated term $name.");
+    $this->assertSession()->pageTextContains("Updated term $name.");
 
     // Check that the automatic alias checkbox is now unchecked by default.
     $this->drupalGet("taxonomy/term/{$term->id()}/edit");
@@ -94,14 +96,16 @@ public function testTermEditing() {
 
     // Submit the term form with the default values.
     $this->drupalPostForm(NULL, ['path[0][pathauto]' => FALSE], t('Save'));
-    $this->assertText("Updated term $name.");
+    // $this->assertText("Updated term $name.");
+    $this->assertSession()->pageTextContains("Updated term $name.");
 
     // Test that the old (automatic) alias has been deleted and only accessible
     // through the new (manual) alias.
     $this->drupalGet($automatic_alias);
     $this->assertResponse(404, 'Term not accessible through automatic alias.');
     $this->drupalGet($manual_alias);
-    $this->assertText($name, 'Term accessible through manual alias.');
+    // $this->assertText($name, 'Term accessible through manual alias.');
+    $this->assertSession()->pageTextContains($name, 'Term accessible through manual alias.');
   }
 
 }
diff --git a/modules/contrib/pathauto/tests/src/Functional/PathautoUserWebTest.php b/modules/contrib/pathauto/tests/src/Functional/PathautoUserWebTest.php
index 8d5cfd8..a3b0770 100644
--- a/modules/contrib/pathauto/tests/src/Functional/PathautoUserWebTest.php
+++ b/modules/contrib/pathauto/tests/src/Functional/PathautoUserWebTest.php
@@ -58,7 +58,8 @@ protected function setUp() {
   public function testUserEditing() {
     // There should be no Pathauto checkbox on user forms.
     $this->drupalGet('user/' . $this->adminUser->id() . '/edit');
-    $this->assertNoFieldById('path[0][pathauto]');
+    // $this->assertNoFieldById('path[0][pathauto]');
+    $this->assertSession()->fieldNotExists('path[0][pathauto]')
   }
 
   /**
@@ -86,7 +87,8 @@ public function testUserOperations() {
       "user_bulk_form[$key]" => TRUE,
     ];
     $this->drupalPostForm('admin/people', $edit, t('Apply to selected items'));
-    $this->assertText('Update URL alias was applied to 1 item.');
+    // $this->assertText('Update URL alias was applied to 1 item.');
+    $this->assertSession()->pageTextContains('Update URL alias was applied to 1 item.');
 
     $this->assertEntityAlias($account, '/users/' . mb_strtolower($account->getDisplayName()));
     $this->assertEntityAlias($this->adminUser, '/user/' . $this->adminUser->id());
